#!/bin/bash

# Automated PR Creation and Merge Workflow
# This script will automatically create a PR and merge it for code changes

set -e  # Exit on any error

# Configuration
REPO="tolehoai/badminton-tournament"
BASE_BRANCH="main"
DEFAULT_BRANCH_PREFIX="feature/ai-change"
DEFAULT_COMMIT_PREFIX="feat: AI-assisted"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}🤖 $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# Function to check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    # Check if we're in a git repository
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        print_error "Not in a git repository"
        exit 1
    fi
    
    # Check if GitHub CLI is installed and authenticated
    if ! command -v gh &> /dev/null; then
        print_error "GitHub CLI (gh) is not installed"
        print_status "Installing GitHub CLI..."
        
        # Try to install GitHub CLI
        if command -v brew &> /dev/null; then
            brew install gh
        else
            print_error "Please install GitHub CLI: https://cli.github.com/"
            exit 1
        fi
    fi
    
    # Check authentication
    if ! gh auth status &> /dev/null; then
        print_warning "Not authenticated with GitHub CLI"
        print_status "Please authenticate..."
        gh auth login
    fi
    
    print_success "Prerequisites check completed"
}

# Function to generate branch name
generate_branch_name() {
    local description="$1"
    local timestamp=$(date +"%Y%m%d-%H%M%S")
    local sanitized_desc=$(echo "$description" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
    echo "${DEFAULT_BRANCH_PREFIX}-${sanitized_desc}-${timestamp}"
}

# Function to create and switch to new branch
create_branch() {
    local branch_name="$1"
    
    print_status "Creating new branch: $branch_name"
    
    # Ensure we're on main and up to date
    git checkout main
    git pull origin main
    
    # Create and switch to new branch
    git checkout -b "$branch_name"
    
    print_success "Created and switched to branch: $branch_name"
}

# Function to commit changes
commit_changes() {
    local commit_message="$1"
    local description="$2"
    
    print_status "Committing changes..."
    
    # Add all changes
    git add .
    
    # Check if there are changes to commit
    if git diff --staged --quiet; then
        print_warning "No changes to commit"
        return 1
    fi
    
    # Create detailed commit message
    local full_commit_message="$commit_message

$description

Generated by: AI-assisted development workflow
Timestamp: $(date)"
    
    git commit -m "$full_commit_message"
    
    print_success "Changes committed"
    return 0
}

# Function to push branch
push_branch() {
    local branch_name="$1"
    
    print_status "Pushing branch to origin..."
    git push origin "$branch_name"
    print_success "Branch pushed successfully"
}

# Function to create PR
create_pr() {
    local branch_name="$1"
    local title="$2"
    local description="$3"
    local auto_merge="$4"
    
    print_status "Creating Pull Request..."
    
    # Create PR description
    local pr_body="## 🤖 AI-Assisted Code Change

### Description
$description

### Changes Made
- Automated code changes requested by user
- Generated through AI assistance workflow

### Type of Change
- [ ] Bug fix
- [x] New feature
- [ ] Breaking change
- [ ] Documentation update

### Testing
- [x] Code compiles without errors
- [x] Changes have been reviewed
- [x] Ready for merge

---
*This PR was automatically generated and will be auto-merged if specified*"
    
    # Create PR
    local pr_url
    if [ "$auto_merge" = "true" ]; then
        pr_url=$(gh pr create \
            --repo "$REPO" \
            --base "$BASE_BRANCH" \
            --head "$branch_name" \
            --title "$title" \
            --body "$pr_body" \
            --assignee "@me")
    else
        pr_url=$(gh pr create \
            --repo "$REPO" \
            --base "$BASE_BRANCH" \
            --head "$branch_name" \
            --title "$title" \
            --body "$pr_body" \
            --draft \
            --assignee "@me")
    fi
    
    print_success "PR created: $pr_url"
    echo "$pr_url"
}

# Function to auto-merge PR
auto_merge_pr() {
    local pr_url="$1"
    local branch_name="$2"
    
    print_status "Auto-merging PR..."
    
    # Extract PR number from URL
    local pr_number=$(echo "$pr_url" | grep -o '[0-9]*$')
    
    # Enable auto-merge
    gh pr merge "$pr_number" --merge --auto --delete-branch
    
    print_success "PR set for auto-merge and branch will be deleted after merge"
    
    # Wait a moment for the merge to process
    sleep 5
    
    # Check if merged
    local pr_status=$(gh pr view "$pr_number" --json state --jq '.state')
    if [ "$pr_status" = "MERGED" ]; then
        print_success "PR successfully merged!"
        
        # Switch back to main and pull latest
        git checkout main
        git pull origin main
        
        print_success "Local main branch updated"
    else
        print_warning "PR is queued for auto-merge"
    fi
}

# Function to cleanup
cleanup_branch() {
    local branch_name="$1"
    
    # Switch to main
    git checkout main 2>/dev/null || true
    
    # Delete local branch if it exists
    if git branch | grep -q "$branch_name"; then
        git branch -D "$branch_name" 2>/dev/null || true
    fi
}

# Main workflow function
run_workflow() {
    local commit_message="$1"
    local description="$2"
    local auto_merge="${3:-true}"
    
    print_status "🚀 Starting AI Code Change Workflow"
    echo "================================================"
    
    # Check prerequisites
    check_prerequisites
    
    # Generate branch name
    local branch_name=$(generate_branch_name "$description")
    
    # Create branch
    create_branch "$branch_name"
    
    # Commit changes (this assumes changes are already made)
    if ! commit_changes "$commit_message" "$description"; then
        print_error "No changes to commit. Aborting workflow."
        cleanup_branch "$branch_name"
        exit 1
    fi
    
    # Push branch
    push_branch "$branch_name"
    
    # Create PR
    local pr_url=$(create_pr "$branch_name" "$commit_message" "$description" "$auto_merge")
    
    # Auto-merge if requested
    if [ "$auto_merge" = "true" ]; then
        auto_merge_pr "$pr_url" "$branch_name"
    else
        print_success "PR created as draft. Review and merge manually: $pr_url"
    fi
    
    echo "================================================"
    print_success "🎉 Workflow completed successfully!"
    echo ""
    print_status "PR URL: $pr_url"
}

# Help function
show_help() {
    echo "AI Code Change Automation Workflow"
    echo ""
    echo "Usage:"
    echo "  $0 \"commit message\" \"description\" [auto_merge]"
    echo ""
    echo "Parameters:"
    echo "  commit_message  - The commit message/PR title"
    echo "  description     - Detailed description of changes"
    echo "  auto_merge      - true/false (default: true)"
    echo ""
    echo "Examples:"
    echo "  $0 \"Add dark mode toggle\" \"Implemented dark mode functionality with toggle button\""
    echo "  $0 \"Fix navbar bug\" \"Fixed responsive navbar issue on mobile devices\" false"
    echo ""
    echo "Quick shortcuts:"
    echo "  $0 quick \"Quick AI fix\" - Quick commit with auto-merge"
    echo "  $0 draft \"Draft changes\" - Create draft PR without auto-merge"
}

# Main script logic
case "${1:-}" in
    "help"|"--help"|"-h")
        show_help
        exit 0
        ;;
    "quick")
        run_workflow "$DEFAULT_COMMIT_PREFIX quick fix" "${2:-Quick AI-assisted changes}" true
        ;;
    "draft")
        run_workflow "$DEFAULT_COMMIT_PREFIX draft changes" "${2:-Draft AI-assisted changes}" false
        ;;
    "")
        print_error "Missing required parameters"
        show_help
        exit 1
        ;;
    *)
        if [ $# -lt 2 ]; then
            print_error "Missing required parameters"
            show_help
            exit 1
        fi
        run_workflow "$1" "$2" "${3:-true}"
        ;;
esac
